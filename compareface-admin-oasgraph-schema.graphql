type Query {
  """
  Get application roles, that can be assigned to other users
  
  Equivalent to GET /admin/app/{guid}/assign-roles
  """
  adminAppAssignRoles(
    """GUID of the application"""
    guid: String!
  ): [AdminAppAssignRolesListItem]

  """
  Get summarized by day statistics of a model for the last couple of months
  
  Equivalent to GET /admin/app/{appGuid}/model/{guid}/statistics
  """
  adminAppModelStatistics(
    """GUID of application"""
    appGuid: String!

    """GUID of model"""
    guid: String!
  ): [ModelStatisticProjection]

  """
  Get all models in application
  
  Equivalent to GET /admin/app/{appGuid}/models
  """
  adminAppModels(
    """GUID of application"""
    appGuid: String!
  ): [ModelResponseDto]

  """
  Get users of application
  
  Equivalent to GET /admin/app/{guid}/roles
  """
  adminAppRoles(
    """GUID of application"""
    guid: String!

    """Filter by first name, last name or email of user"""
    search: String
  ): [UserRoleResponseDto]

  """
  Get all applications
  
  Equivalent to GET /admin/apps
  """
  adminApps: [AppResponseDto]

  """
  Get demo model apiKey if available
  
  Equivalent to GET /admin/user/demo/model
  """
  adminUserDemoModel: JSON

  """
  Get global roles, that can be assigned to other users
  
  Equivalent to GET /admin/user/global/assign-roles
  """
  adminUserGlobalAssignRoles: [AdminUserGlobalAssignRolesListItem]

  """
  Get all global roles
  
  Equivalent to GET /admin/user/global/roles
  """
  adminUserGlobalRoles: [AdminUserGlobalRolesListItem]

  """
  Get all users
  
  Equivalent to GET /admin/user/roles
  """
  adminUserRoles: [UserRoleResponseDto]

  """
  Get application
  
  Equivalent to GET /admin/app/{guid}
  """
  appResponseDto(
    """GUID of application to return"""
    guid: String!
  ): AppResponseDto

  """
  Get status of application
  
  Equivalent to GET /admin/status
  """
  appStatusResponseDto: AppStatusResponseDto

  """
  Returns configuration properties of the application
  
  Equivalent to GET /admin/config
  """
  configDto: ConfigDto

  """
  Get model
  
  Equivalent to GET /admin/app/{appGuid}/model/{guid}
  """
  modelResponseDto(
    """GUID of application"""
    appGuid: String!

    """GUID of model to return"""
    guid: String!
  ): ModelResponseDto

  """
  User autocomplete by (email, first name or last name)
  
  Equivalent to GET /admin/user/autocomplete
  """
  userAutocompleteDto(
    """query"""
    query: String!
  ): UserAutocompleteDto

  """
  Get information about user, that logged in
  
  Equivalent to GET /admin/user/me
  """
  userResponseDto: UserResponseDto
}

enum AdminAppAssignRolesListItem {
  OWNER
  ADMINISTRATOR
  USER
}

type ModelStatisticProjection {
  createdDate: String
  requestCount: BigInt
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type ModelResponseDto {
  apiKey: String
  createdDate: String
  id: String
  imageCount: BigInt
  name: String
  subjectCount: BigInt
  type: Type
}

enum Type {
  RECOGNITION
  DETECTION
  VERIFY
}

type UserRoleResponseDto {
  email: String
  firstName: String
  lastName: String
  role: String
  userId: String
}

type AppResponseDto {
  apiKey: String
  id: String
  name: String
  owner: AppOwnerDto
  role: String
}

type AppOwnerDto {
  firstName: String
  lastName: String
  userId: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum AdminUserGlobalAssignRolesListItem {
  OWNER
  ADMINISTRATOR
  USER
}

enum AdminUserGlobalRolesListItem {
  OWNER
  ADMINISTRATOR
  USER
}

type AppStatusResponseDto {
  status: Status
}

enum Status {
  OK
  NOT_READY
}

type ConfigDto {
  mailServiceEnabled: Boolean
}

type UserAutocompleteDto {
  length: Int
  query: String
  results: [UserResponseDto]
}

type UserResponseDto {
  email: String
  firstName: String
  lastName: String
  userId: String
}

type Mutation {
  """
  Clone model data
  
  Equivalent to POST /admin/app/{appGuid}/model/{guid}
  """
  cloneModelUsingPOST(
    """GUID of application"""
    appGuid: String!

    """GUID of model that needs to be cloned"""
    guid: String!
    modelCloneDtoInput: ModelCloneDtoInput!
  ): ModelResponseDto

  """
  Create application
  
  Equivalent to POST /admin/app
  """
  createAppUsingPOST(appCreateDtoInput: AppCreateDtoInput!): AppResponseDto

  """
  Create model
  
  Equivalent to POST /admin/app/{appGuid}/model
  """
  createModelUsingPOST(
    """GUID of application"""
    appGuid: String!
    modelCreateDtoInput: ModelCreateDtoInput!
  ): ModelResponseDto

  """
  Invite user to application
  
  Equivalent to POST /admin/app/{guid}/invite
  """
  inviteUserUsingPOST(
    """GUID of application"""
    guid: String!
    userInviteDtoInput: UserInviteDtoInput!
  ): UserRoleResponseDto

  """
  Generate new api-key for application
  
  Equivalent to PUT /admin/app/{guid}/apikey
  """
  regenerateApiKeyUsingPUT(
    """GUID of the application which api-key needs to be regenerated"""
    guid: String!
  ): AppResponseDto

  """
  Generate new api-key for model
  
  Equivalent to PUT /admin/app/{appGuid}/model/{guid}/apikey
  """
  regenerateApiKeyUsingPUT1(
    """GUID of application"""
    appGuid: String!

    """GUID of the model which GUID needs to be regenerated"""
    guid: String!
  ): ModelResponseDto

  """
  Update application
  
  Equivalent to PUT /admin/app/{guid}
  """
  updateAppUsingPUT(
    appUpdateDtoInput: AppUpdateDtoInput!

    """GUID of application that needs to be updated"""
    guid: String!
  ): AppResponseDto

  """
  Update model data
  
  Equivalent to PUT /admin/app/{appGuid}/model/{guid}
  """
  updateModelUsingPUT(
    """GUID of application"""
    appGuid: String!

    """GUID of model that needs to be updated"""
    guid: String!
    modelUpdateDtoInput: ModelUpdateDtoInput!
  ): ModelResponseDto

  """
  Update user application role
  
  Equivalent to PUT /admin/app/{guid}/role
  """
  updateUserAppRoleUsingPUT(
    """GUID of application"""
    guid: String!
    userRoleUpdateDtoInput: UserRoleUpdateDtoInput!
  ): UserRoleResponseDto

  """
  Update user global role
  
  Equivalent to PUT /admin/user/global/role
  """
  updateUserGlobalRoleUsingPUT(userRoleUpdateDtoInput: UserRoleUpdateDtoInput!): UserRoleResponseDto

  """
  Update user data
  
  Equivalent to PUT /admin/user/update
  """
  updateUserUsingPUT(userUpdateDtoInput: UserUpdateDtoInput!): UserResponseDto
}

input ModelCloneDtoInput {
  name: String
}

input AppCreateDtoInput {
  name: String
}

input ModelCreateDtoInput {
  name: String
  type: String
}

input UserInviteDtoInput {
  role: String
  userEmail: String
}

input AppUpdateDtoInput {
  name: String
}

input ModelUpdateDtoInput {
  name: String
}

input UserRoleUpdateDtoInput {
  role: String
  userId: String
}

input UserUpdateDtoInput {
  firstName: String
  lastName: String
}